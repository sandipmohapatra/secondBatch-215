1)Jasmine is an open-source javascript framework capable of testing any kind of javascript application. 
2)Jasmine follows BDD (behavior Driven Development) procedure to ensure that each line
in javascript statement is propertly unit tested.
3)Jasmine provides a small syntax to test the smallest unit of application.
4)In unit testing we test small function part by part instead of testing the whole application.
---------------------------------------------------------------------------------------------------------------------------------
we have to install jasmine software to do the testing.
After installation we have we will see 
1)lib folder :- It contains some javascript library.It is used to test the application. 
2)spec folder:- In this we have to write the test cases. 
3)src folder:-In this we will have the program to test.
4)license
5)SpecRunner.html:-we have to mention both the files location.Which will test the application and display the report.
example:-
<!-- include source files here... -->
  <script src="src/Player.js"></script>
  
  <!-- include spec files here... -->
  <script src="spec/SpecHelper.js"></script> 
--------------------------------------------------------------------------------
to download we have to goto the official website :- https://github.com/jasmine/jasmine/releases
We have to download the standalone vesion.
-----------------------------Example-1------------------------------------------
source file:-
test1.js
--------------
var helloworld = function()
{
return 'Hello every one welcome to Jasmine';
};
----------------------------------------------------------------------------
spec file:-
----------------
spect1.js
-----------------
describe("Hello every one welcome to Jasmine", function()
{
it("should return Hello every one welcome to Jasmine", function()
{
expect(helloworld()).toEqual('Hello every one welcome to Jasmine');
});
});
----------------------------------------------------------------------------------------------------
<!-- include source files here... -->
  <script src="src/test1.js"></script>
  
  <!-- include spec files here... -->
  <script src="spec/spec1.js"></script> 
----------------------------------------------------------------------------
we have 2 parts 
1)expected output
2)real output 
if both match then the test is successful otherwise it will be failure.
------------------------------------------------------------------------------------------------------
step-1:-download the file.(https://github.com/jasmine/jasmine/releases)
------------------------------------------------------------------------------------------------------------------
Example-2
-------------------
calculator = function() {};

calculator.prototype.sum = function(number1, number2)
{
return number1 + number2;
}
------------------------------------------------------------
describe("calculator",function(){
    var cal;
    beforeEach(function()
    {
        cal = new calculator();
    });
describe("we use the calculator for basic math operation",function()
{
it("should be able to add 3 and 5",function()
{
expect(cal.sum(3,5)).toEqual(8);
});
});
});

--------------------------------------------------------------------------------------------
beforeEach():-The beforeEach function is called once before each spec in the describe()  in which itt is called.
afterEach():-This will called once after each spec.
--------------------------------------------------------------------------------
Example-3
------------------
calculator = function() {};

calculator.prototype.sum = function(number1, number2)
{
return number1 + number2;
}

calculator.prototype.sub = function(number1, number2)
{
return number1 - number2;
}

calculator.prototype.mul = function(number1, number2)
{
return number1 * number2;
}

calculator.prototype.div = function(number1, number2)
{
return number1 / number2;
}
-------------------------------------------------------------------------------
describe("calculator",function()
{
    var cal;
    beforeEach(function()
    {
        cal = new calculator();
    });
describe("we use the calculator for basic math operation",function()
{

it("should be able to add 3 and 5",function()
{
expect(cal.sum(3,5)).toEqual(8);
});

it("should be able to subtract 3 and 5",function()
{
expect(cal.sub(3,5)).toEqual(-2);
});

it("should be able to multiply 3 and 5",function()
{
expect(cal.mul(3,5)).toEqual(15);
});

it("should be able to divide 15 and 5",function()
{
expect(cal.div(15,5)).toEqual(3);
});

});
});

-------------------------------------------------------------------------------------
wap to test square of 2 nos 
and factorial of a no.
--------------------------------------------
Example-4
-----------------------
factorial = function() {};
factorial.prototype.fac= function(number1)
{
    let ans=1;
    for(var i=number1; i>=1; i--)
    {
        ans= ans*i;
    }
    return ans ;
}
----------------------------------------------------------------------------------
describe("factorial",function(){
    var fact;
    beforeEach(function()
    {
        fact = new factorial();
    });
describe("we use the factorial for basic math operation",function()
{
it("should be able to do factorial ",function()
{
expect(fact.fac(4)).toEqual(24);
});
});
});
---------------------------------------------------------------------------------------------------------
Functions:-
--------------------
1)ToEqual():- It is a simplest mattcher present in the jasmine inbuilt library.
It checks whether the result of the operation matches or not.
example:-
test.js
-------------
window.expectexam={
    currentVal:0,
};

-------------------------------------------------------------- 
spec.js
describe("Different Method of Expected Block",function()
{
    it("the example of toEqual method",function()
    {
        expect(expectexam.currentVal).toEqual(0);
    });
});
-------------------------------------------------------------------------------------------------------------------------
2)not.toEqual():- It is a simplest matcher present in the jasmine inbuilt library.
It checks whether the result of the operation matches or not.It is opposite to toEqual().
example:-
test.js
-------------
window.expectexam={
    currentVal:0,
};

-------------------------------------------------------------- 
spec.js
describe("Different Method of Expected Block",function()
{
    it("the example of not.toEqual method",function()
    {
        expect(expectexam.currentVal).not.toEqual(5);
    });
});
----------------------------------------------
3)ToBe() :-This is similar to toEqual().But technically different .It matches with the type of object.
example:-
window.expectexam={
    name:"Gopal",
    name1:"Gopal"
};
--------------------------------------------------------------
describe("Different Method of Expected Block",function()
{
    it("the example of toBe method",function()
    {
        expect(expectexam.name).toBe(expectexam.name1);
    });
});
-----------------------------------------------------------------------------------------
4)not.toBe() :-It is opposite to toBe() .It matches with the type of object.
example:-
window.expectexam={
    name:"Gopal",
    name1:"Shivam"
};
--------------------------------------------------------------
describe("Different Method of Expected Block",function()
{
    it("the example of not.toBe method",function()
    {
        expect(expectexam.name).not.toBe(expectexam.name1);
    });
});
-----------------------------------------------------------------------------------------
5)ToBeTruthy():- This is Boolean matcher to check whether the result is equal to true or false.
example :- age is greater than 18.(return true/false)
example:-
window.expectexam={
    exampleofTruefalse : function(num)
    {
        if(num < 10)
        return true;
        else
        return false;
    },
};
------------------------------------
describe("Different Method of Expected Block",function()
{
    it("the example of toBeTruthy()",function()
    {
        expect(expectexam.exampleofTruefalse(7)).toBeTruthy();
    });
});
---------------------------------------------------------------------------------
6)toBeFalsy():- This is Boolean matcher to check whether the result is equal to true or false.
example :- age is greater than 18.(return true/false)
example:-
window.expectexam={
    exampleofTruefalse : function(num)
    {
        if(num < 10)
        return true;
        else
        return false;
    },
};
------------------------------------
describe("Different Method of Expected Block",function()
{
    it("the example of toBeFalsy()",function()
    {
        expect(expectexam.exampleofTruefalse(17)).toBeFalsy();
    });
});
--------------------------------------------------------------------------------- 
7)To contain():- It matches with the elements in an array or some other sequential objects.

example:-
describe("Different Method of Expected Block",function()
{
    it("the example of toContain()",function()
    {
        expect([1,2,3,4]).toContain(3);
    });
});
--------------------------------------------------------------------------
8)ToBeCloseTo():- It matches whether the actual value is sole to the expected value.

example:-
describe("Different Method of Expected Block",function()
{
    it("the example of toBeCloseTo()",function()
    {
        expect(12.35).toBeCloseTo(12.3, 1);
    });
});
-----------------------------------------------------------------------------------------------------
9)ToMatch():- It is used for string type variable.
It checks the specific string is present in the expected output.
example:-
describe("Different Method of Expected Block",function()
{
    it("the example of toMatch()",function()
    {
        expect("jasmine is not a flower").toMatch(/flower/);
    });
});
------------------------------------------------------------------------------------------------------------
10)ToBeDefined():-This checks whether any variable is predefined or not.
example:- x=10;

example:-
currentVal = 10;

describe("Different Method of Expected Block",function()
{
    it("the example of toBeDefined()",function()
    {
        expect(currentVal).toBeDefined();
    });
});
----------------------------------------------------------------------------------------------
11)ToBeUnDefined():- This checks whether variable is undefined or not.
It is opposite to toBeDefined().
example:-
describe("Different Method of Expected Block",function()
{
    it("the example of toBeUndefined()",function()
    {
        var currentVal;
        expect(currentVal).toBeUndefined();
    });
});
-------------------------------------------------------------------------------------------------
12)toBeNull():- This will check the value is null or not.

example:- var name= null;
example:-
describe("Different Method of Expected Block",function()
{
    it("the example of toBeNull()",function()
    {
        var currentVal = null;
        expect(currentVal).toBeNull();
    });
});
----------------------------------------------------------------------------------------
13)ToBeGreaterThan():- It is applicable to numbers only.
It checks the number is greater than or not.

example:-
describe("Different Method of Expected Block",function()
{
    it("the example of toBeGreaterThan()",function()
    {
        var currentVal = 5;
        expect(currentVal).toBeGreaterThan(4);
    });
});
----------------------------------------------------------------------------------------------
14)ToBeLessThan():- It is applicable to numbers only.
It checks the number is greater than or not.

example:-
describe("Different Method of Expected Block",function()
{
    it("the example of toBeLessThan()",function()
    {
        var currentVal = 5;
        expect(currentVal).toBeLessThan(10);
    });
});
-----------------------------------------------------------------------------------------------
 15)toBeNAN:-to be not a number
example :- 0/0 =infinity .so o/p will be NAN.
example:-
describe("Different Method of Expected Block",function()
{
    it("the example of toBeNAN()",function()
    {
       expect( 0 / 0).toBeNaN();
    });
});
----------------------------------------------------------------------------------------------
ng serve we have to write ng test
so that Krama will open.
---------------------------------------------------------------










 


